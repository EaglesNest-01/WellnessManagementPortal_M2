/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.gui;

import com.database.AppointmentDAO;
import controller.AppointmentController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Appointment;

/**
 *
 * @author rmara
 */
public class AppointmentManagement extends javax.swing.JPanel {
private AppointmentController controller = new AppointmentController();
private DefaultTableModel tableModel;
    /**
     * Creates new form AppointmentManagement
     */
  public AppointmentManagement() {
    initComponents();
    initializeTableModel();
    loadAppointments();
}

private void initializeTableModel() {
    tableModel = new DefaultTableModel(
        new Object[][]{},
        new String[]{"ID", "Counsellor", "Date", "Time", "Reason"}
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Make table cells non-editable
        }
    };
    jTable1.setModel(tableModel);
    jTable1.getColumnModel().getColumn(0).setMinWidth(0); // Hide ID column
    jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
    jTable1.getColumnModel().getColumn(0).setWidth(0);
}
//button actions


private void loadAppointments() {
    try {
        tableModel.setRowCount(0); // Clear existing data
        
        for (Appointment app : controller.getAllAppointments()) {
            tableModel.addRow(new Object[]{
                app.getId(),
                app.getCounsellor(),
                app.getDate(),
                app.getTime(),
                app.getReason()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading appointments: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void clearForm() {
    counsellorText.setText("");
    dateText.setText("");
    timeText.setText("");
    reasonText.setText("");
    jTable1.clearSelection();
}       


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        counsellorText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dateText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        timeText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        reasonText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        reschedulebt = new javax.swing.JButton();
        cancelAppointmentbt = new javax.swing.JButton();
        bookAppointmentbt = new javax.swing.JButton();

        setBackground(new java.awt.Color(30, 30, 30));
        setPreferredSize(new java.awt.Dimension(887, 834));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Appointment Management");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Time:");

        counsellorText.setPreferredSize(new java.awt.Dimension(71, 35));
        counsellorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counsellorTextActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Counsellor:");

        dateText.setPreferredSize(new java.awt.Dimension(71, 35));
        dateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Date:");

        timeText.setPreferredSize(new java.awt.Dimension(71, 35));
        timeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Reason:");

        reasonText.setPreferredSize(new java.awt.Dimension(71, 35));
        reasonText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reasonTextActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Counsellor", "Date", "Time", "Reason"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        reschedulebt.setBackground(new java.awt.Color(57, 99, 237));
        reschedulebt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        reschedulebt.setForeground(new java.awt.Color(255, 255, 255));
        reschedulebt.setText("Reschedule");
        reschedulebt.setBorderPainted(false);
        reschedulebt.setPreferredSize(new java.awt.Dimension(0, 50));
        reschedulebt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reschedulebtActionPerformed(evt);
            }
        });

        cancelAppointmentbt.setBackground(new java.awt.Color(211, 57, 49));
        cancelAppointmentbt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        cancelAppointmentbt.setForeground(new java.awt.Color(255, 255, 255));
        cancelAppointmentbt.setText("Cancel Appointment");
        cancelAppointmentbt.setBorderPainted(false);
        cancelAppointmentbt.setPreferredSize(new java.awt.Dimension(0, 50));
        cancelAppointmentbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentbtActionPerformed(evt);
            }
        });

        bookAppointmentbt.setBackground(new java.awt.Color(104, 204, 104));
        bookAppointmentbt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        bookAppointmentbt.setForeground(new java.awt.Color(255, 255, 255));
        bookAppointmentbt.setText("Book Appointment");
        bookAppointmentbt.setBorderPainted(false);
        bookAppointmentbt.setPreferredSize(new java.awt.Dimension(0, 50));
        bookAppointmentbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentbtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(counsellorText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reasonText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookAppointmentbt, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reschedulebt, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelAppointmentbt, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(counsellorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reasonText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reschedulebt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelAppointmentbt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookAppointmentbt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(118, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reschedulebtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reschedulebtActionPerformed
        // TODO add your handling code here:
 int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to reschedule", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            int id = (int) jTable1.getValueAt(selectedRow, 0);
            String counsellor = counsellorText.getText();
            String date = dateText.getText();
            String time = timeText.getText();
            String reason = reasonText.getText();
            
            Appointment appointment = new Appointment(id, counsellor, date, time, reason);
            
            if (controller.updateAppointment(appointment)) {
                JOptionPane.showMessageDialog(this, "Appointment rescheduled successfully!");
                clearForm();
                loadAppointments();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to reschedule appointment", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_reschedulebtActionPerformed

    private void cancelAppointmentbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentbtActionPerformed
        // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to cancel this appointment?", 
            "Confirm Cancellation", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int id = (int) jTable1.getValueAt(selectedRow, 0);
                
                if (controller.deleteAppointment(id)) {
                    JOptionPane.showMessageDialog(this, "Appointment cancelled successfully!");
                    clearForm();
                    loadAppointments();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to cancel appointment", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cancelAppointmentbtActionPerformed

    private void bookAppointmentbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentbtActionPerformed
       
     // Validate inputs first
   if (!validateInputs() || !validateDateTime()) {
        return;
    }
   

    
    try {
        String counsellor = counsellorText.getText().trim();
        String date = dateText.getText().trim();
        String time = timeText.getText().trim();
        String reason = reasonText.getText().trim();
        
        if (counsellor.isEmpty() || reason.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Counsellor and Reason fields are required!",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Appointment appointment = new Appointment(0, counsellor, date, time, reason);
        
        if (controller.createAppointment(appointment)) {
            JOptionPane.showMessageDialog(this, 
                "Appointment booked successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            clearForm();
            loadAppointments();
        } else {
            JOptionPane.showMessageDialog(this, 
                "Failed to book appointment. Please try again.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(),
            "System Error",
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_bookAppointmentbtActionPerformed
private boolean validateInputs() {
    if (counsellorText.getText().trim().isEmpty() ||
        dateText.getText().trim().isEmpty() ||
        timeText.getText().trim().isEmpty() ||
        reasonText.getText().trim().isEmpty()) {
        
        JOptionPane.showMessageDialog(this, 
            "All fields are required!", 
            "Validation Error", 
            JOptionPane.ERROR_MESSAGE);
        return false;
    }
    return true;
}
    private void counsellorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counsellorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_counsellorTextActionPerformed

    private void dateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextActionPerformed

    private void timeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeTextActionPerformed

    private void reasonTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reasonTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reasonTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookAppointmentbt;
    private javax.swing.JButton cancelAppointmentbt;
    private javax.swing.JTextField counsellorText;
    private javax.swing.JTextField dateText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField reasonText;
    private javax.swing.JButton reschedulebt;
    private javax.swing.JTextField timeText;
    // End of variables declaration//GEN-END:variables

  private boolean validateDateTime() {
    try {
        // Validate date format (YYYY-MM-DD)
        String date = dateText.getText().trim();
        if (!date.matches("\\d{4}-\\d{2}-\\d{2}")) {
            throw new IllegalArgumentException("Date must be in YYYY-MM-DD format");
        }
        
        // Validate time format (HH:MM)
        String time = timeText.getText().trim();
        if (!time.matches("\\d{2}:\\d{2}")) {
            throw new IllegalArgumentException("Time must be in HH:MM format");
        }
        
        return true;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
}
}
